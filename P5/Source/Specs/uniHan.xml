<!-- Copyright TEI Consortium. Dual-licensed under CC-by and BSD2 licences See the file COPYING.txt for details $Date$ $Id$ --><?xml-model href="http://jenkins.tei-c.org/job/TEIP5-dev/lastSuccessfulBuild/artifact/P5/release/xml/tei/odd/p5.nvdl" type="application/xml" schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?><elementSpec xmlns="http://www.tei-c.org/ns/1.0"
             xmlns:sch="http://purl.oclc.org/dsdl/schematron"
             xmlns:rng="http://relaxng.org/ns/structure/1.0" 
             ident="uniHan"
             module="gaiji"
             xml:id="UNIHAN">
    <gloss versionDate="2018-08-22" xml:lang="en">uniHan field name</gloss>
    <desc versionDate="2018-08-22" xml:lang="en">contains the name of a normative or informative
        UniHan field.</desc>
    <classes>
        <!-- This seems odd but matches unicodeName -->
        <memberOf key="att.global"/>       
    </classes>
    <content>
       <rng:group>
          <rng:choice>
             <rng:value> kZVariant</rng:value>
             <rng:value>kAccountingNumeric</rng:value>
             <rng:value>kBigFive</rng:value>
             <rng:value>kCCCII</rng:value>
             <rng:value>kCNS1986</rng:value>
             <rng:value>kCNS1992</rng:value>
             <rng:value>kCangjie</rng:value>
             <rng:value>kCantonese</rng:value>
             <rng:value>kCheungBauer</rng:value>
             <rng:value>kCheungBauerIndex</rng:value>
             <rng:value>kCihaiT</rng:value>
             <rng:value>kCompatibilityVariant</rng:value>
             <rng:value>kCowles</rng:value>
             <rng:value>kDaeJaweon</rng:value>
             <rng:value>kDefinition</rng:value>
             <rng:value>kEACC</rng:value>
             <rng:value>kFenn</rng:value>
             <rng:value>kFennIndex</rng:value>
             <rng:value>kFourCornerCode</rng:value>
             <rng:value>kFrequency</rng:value>
             <rng:value>kGB0</rng:value>
             <rng:value>kGB1</rng:value>
             <rng:value>kGB3</rng:value>
             <rng:value>kGB5</rng:value>
             <rng:value>kGB7</rng:value>
             <rng:value>kGB8</rng:value>
             <rng:value>kGSR</rng:value>
             <rng:value>kGradeLevel</rng:value>
             <rng:value>kHDZRadBreak</rng:value>
             <rng:value>kHKGlyph</rng:value>
             <rng:value>kHKSCS</rng:value>
             <rng:value>kHanYu</rng:value>
             <rng:value>kHangul</rng:value>
             <rng:value>kHanyuPinlu</rng:value>
             <rng:value>kHanyuPinyin</rng:value>
             <rng:value>kIBMJapan</rng:value>
             <rng:value>kIICore</rng:value>
             <rng:value>kIRGDaeJaweon</rng:value>
             <rng:value>kIRGDaiKanwaZiten</rng:value>
             <rng:value>kIRGHanyuDaZidian</rng:value>
             <rng:value>kIRGKangXi</rng:value>
             <rng:value>kIRG_GSource</rng:value>
             <rng:value>kIRG_HSource</rng:value>
             <rng:value>kIRG_JSource</rng:value>
             <rng:value>kIRG_KPSource</rng:value>
             <rng:value>kIRG_KSource</rng:value>
             <rng:value>kIRG_MSource</rng:value>
             <rng:value>kIRG_TSource</rng:value>
             <rng:value>kIRG_USource</rng:value>
             <rng:value>kIRG_VSource</rng:value>
             <rng:value>kJIS0213</rng:value>
             <rng:value>kJa</rng:value>
             <rng:value>kJapaneseKun</rng:value>
             <rng:value>kJapaneseOn</rng:value>
             <rng:value>kJinmeiyoKanji</rng:value>
             <rng:value>kJis0</rng:value>
             <rng:value>kJis1</rng:value>
             <rng:value>kJoyoKanji</rng:value>
             <rng:value>kKPS0</rng:value>
             <rng:value>kKPS1</rng:value>
             <rng:value>kKSC0</rng:value>
             <rng:value>kKSC1</rng:value>
             <rng:value>kKangXi</rng:value>
             <rng:value>kKarlgren</rng:value>
             <rng:value>kKorean</rng:value>
             <rng:value>kKoreanEducationHanja</rng:value>
             <rng:value>kKoreanName</rng:value>
             <rng:value>kLau</rng:value>
             <rng:value>kMainlandTelegraph</rng:value>
             <rng:value>kMandarin</rng:value>
             <rng:value>kMatthews</rng:value>
             <rng:value>kMeyerWempe</rng:value>
             <rng:value>kMorohashi</rng:value>
             <rng:value>kNelson</rng:value>
             <rng:value>kOtherNumeric</rng:value>
             <rng:value>kPhonetic</rng:value>
             <rng:value>kPrimaryNumeric</rng:value>
             <rng:value>kPseudoGB1</rng:value>
             <rng:value>kRSAdobe_Japan1_6</rng:value>
             <rng:value>kRSJapanese</rng:value>
             <rng:value>kRSKanWa</rng:value>
             <rng:value>kRSKangXi</rng:value>
             <rng:value>kRSKorean</rng:value>
             <rng:value>kRSUnicode</rng:value>
             <rng:value>kSBGY</rng:value>
             <rng:value>kSemanticVariant</rng:value>
             <rng:value>kSimplifiedVariant</rng:value>
             <rng:value>kSpecializedSemanticVariant</rng:value>
             <rng:value>kTGH</rng:value>
             <rng:value>kTaiwanTelegraph</rng:value>
             <rng:value>kTang</rng:value>
             <rng:value>kTotalStrokes</rng:value>
             <rng:value>kTraditionalVariant</rng:value>
             <rng:value>kVietnamese</rng:value>
             <rng:value>kXHC1983</rng:value>
             <rng:value>kXerox</rng:value>
          </rng:choice>
       </rng:group>
    </content>
    <constraintSpec ident="kAccountingNumeric" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kAccountingNumeric' or matches($input-value, '[0-9]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kBigFive" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kBigFive' or matches($input-value, '[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kCCCII" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kCCCII' or matches($input-value, '[0-9A-F]{6}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kCNS1986" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kCNS1986' or matches($input-value, '[12E]-[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kCNS1992" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kCNS1992' or matches($input-value, '[1-9]-[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kCangjie" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kCangjie' or matches($input-value, '[A-Z]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kCantonese" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kCantonese' or matches($input-value, '[a-z]{1,6}[1-6]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kCheungBauer" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kCheungBauer' or matches($input-value, '[0-9]{3}/[0-9]{2};[A-Z]*;[a-z1-6\[\]/,]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kCheungBauerIndex" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kCheungBauerIndex' or matches($input-value, '[0-9]{3}\.[01][0-9]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kCihaiT" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kCihaiT' or matches($input-value, '[1-9][0-9]{0,3}\.[0-9]{3}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kCompatibilityVariant" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kCompatibilityVariant' or matches($input-value, 'U\+2?[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kCowles" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kCowles' or matches($input-value, '[0-9]{1,4}(\.[0-9]{1,2})?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kDaeJaweon" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kDaeJaweon' or matches($input-value, '[0-9]{4}\.[0-9]{2}[01]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kDefinition" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kDefinition' or matches($input-value, '[^\t&#34;]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kEACC" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kEACC' or matches($input-value, '[0-9A-F]{6}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kFenn" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kFenn' or matches($input-value, '[0-9]+a?[A-KP*]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kFennIndex" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kFennIndex' or matches($input-value, '[0-9][0-9]{0,2}\.[01][0-9]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kFourCornerCode" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kFourCornerCode' or matches($input-value, '[0-9]{4}(\.[0-9])?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kFrequency" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kFrequency' or matches($input-value, '[1-5]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kGB0" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kGB0' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kGB1" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kGB1' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kGB3" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kGB3' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kGB5" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kGB5' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kGB7" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kGB7' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kGB8" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kGB8' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kGSR" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kGSR' or matches($input-value, '[0-9]{4}[a-vx-z]\W?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kGradeLevel" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kGradeLevel' or matches($input-value, '[1-6]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kHDZRadBreak" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kHDZRadBreak' or matches($input-value, '[⼀-⿕]\[U\+2F[0-9A-D][0-9A-F]\]:[1-8][0-9]{4}\.[0-3][0-9]0')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kHKGlyph" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kHKGlyph' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kHKSCS" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kHKSCS' or matches($input-value, '[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kHanYu" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kHanYu' or matches($input-value, '[1-8][0-9]{4}\.[0-3][0-9][0-3]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kHangul" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kHangul' or matches($input-value, '[ᄀ-ᄒ][ᅡ-ᅵ][ᆨ-ᇂ]?:[01EN]{1,3}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kHanyuPinlu" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kHanyuPinlu' or matches($input-value, '[\p{L}\p{M}*+]\([0-9]+\)')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kHanyuPinyin" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kHanyuPinyin' or matches($input-value, '(\d{5}\.\d{2}0,)*\d{5}\.\d{2}0:([\p{L}\p{M}*+]+,)*[\p{L}\p{M}*+]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIBMJapan" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIBMJapan' or matches($input-value, 'F[ABC][0-9A-F]{2}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIICore" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIICore' or matches($input-value, '[ABC][GHJKMPT]{1,7}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRGDaeJaweon" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRGDaeJaweon' or matches($input-value, '[0-9]{4}\.[0-9]{2}[01]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRGDaiKanwaZiten" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRGDaiKanwaZiten' or matches($input-value, '[0-9]{5}\W?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRGHanyuDaZidian" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRGHanyuDaZidian' or matches($input-value, '[1-8][0-9]{4}\.[0-3][0-9][01]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRGKangXi" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRGKangXi' or matches($input-value, '[01][0-9]{3}\.[0-7][0-9][01]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRG_GSource" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRG_GSource' or matches($input-value,           'G(4K|BK|CH|CY|FZ|HC|HZ|((BK|CH|CY|DZ|GH|HC|RM|WZ|XC|XH|ZH)-[0-9]{4}\.[0-9]{2})|HZ-[0-9]{5}\.[0-9]{2}|(KX-[01][0-9]{3}\.1?[0-9]{2})|((CYY|FZ|JZ|ZFY|ZJW)-[0-9]{5})|([0135789ES]-[0-9A-F]{4})|(XHZ-[0-9]{3})|(PGLG-[0-9]{4})|(IDC-[0-9]{3})|(K-[0-9A-F]{4})|((OCD|CE)-\d{3})|(H-\d{4})|(H-\d{7})|(LGYJ-\d{4})|(ZYS-\d{5})|(Z-\d{4})|(Z-\d{7})|(G?F[CZ]-\d{3,6}))')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRG_HSource" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRG_HSource' or matches($input-value, 'H(-[0-9A-F]{4,5}|(B[012]|D)-[0-9A-F]{4})')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRG_JSource" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRG_JSource' or matches($input-value, 'J1?((([0134AK]|A[34]|3A|ARIB|MJ)-[0-9A-F]{4,6})|(H-(((IB|JT|[0-9]{2})[0-9A-F]{4}S?))))')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRG_KPSource" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRG_KPSource' or matches($input-value, 'KP[01]-[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRG_KSource" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRG_KSource' or matches($input-value, 'K([0-5]-[0-9A-F]{4}|C-[0-9]{5})')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRG_MSource" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRG_MSource' or matches($input-value, 'MAC-[0-9]{5}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRG_TSource" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRG_TSource' or matches($input-value, 'T[1-7B-F]-[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRG_USource" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRG_USource' or matches($input-value, 'U(TC|CI|K|SAT)-[0-9]{5}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kIRG_VSource" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kIRG_VSource' or matches($input-value, 'V[0-4U]-[02]?[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kJIS0213" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kJIS0213' or matches($input-value, '[12],[0-9]{2},[0-9]{1,2}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kJa" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kJa' or matches($input-value, '[0-9A-F]{4}S?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kJapaneseKun" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kJapaneseKun' or matches($input-value, '[A-Z]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kJapaneseOn" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kJapaneseOn' or matches($input-value, '[A-Z]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kJinmeiyoKanji" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kJinmeiyoKanji' or matches($input-value, '(20[0-9]{2})(:U\+2?[0-9A-F]{4})?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kJis0" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kJis0' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kJis1" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kJis1' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kJoyoKanji" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kJoyoKanji' or matches($input-value, '(20[0-9]{2})|(U\+2?[0-9A-F]{4})')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kKPS0" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kKPS0' or matches($input-value, '[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kKPS1" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kKPS1' or matches($input-value, '[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kKSC0" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kKSC0' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kKSC1" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kKSC1' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kKangXi" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kKangXi' or matches($input-value, '[0-9]{4}\.[0-9]{2}[01]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kKarlgren" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kKarlgren' or matches($input-value, '[1-9][0-9]{0,3}[A*]?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kKorean" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kKorean' or matches($input-value, '[A-Z]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kKoreanEducationHanja" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kKoreanEducationHanja' or matches($input-value, '20[0-9]{2}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kKoreanName" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kKoreanName' or matches($input-value, '(20[0-9]{2})(:U\+2?[0-9A-F]{4})*')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kLau" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kLau' or matches($input-value, '[1-9][0-9]{0,3}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kMainlandTelegraph" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kMainlandTelegraph' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kMandarin" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kMandarin' or matches($input-value, '[\p{L}\p{M}*+]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kMatthews" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kMatthews' or matches($input-value, '[1-9][0-9]{0,3}(a|\.5)?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kMeyerWempe" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kMeyerWempe' or matches($input-value, '[1-9][0-9]{0,3}[a-t*]?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kMorohashi" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kMorohashi' or matches($input-value, '[0-9]{5}\W?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kNelson" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kNelson' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kOtherNumeric" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kOtherNumeric' or matches($input-value, '[0-9]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kPhonetic" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kPhonetic' or matches($input-value, '[1-9][0-9]{0,3}[A-D]?\*?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kPrimaryNumeric" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kPrimaryNumeric' or matches($input-value, '[0-9]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kPseudoGB1" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kPseudoGB1' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kRSAdobe_Japan1_6" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kRSAdobe_Japan1_6' or matches($input-value, '[CV]\+[0-9]{1,5}\+[1-9][0-9]{0,2}\.[1-9][0-9]?\.[0-9]{1,2}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kRSJapanese" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kRSJapanese' or matches($input-value, '[1-9][0-9]{0,2}\.[0-9]{1,2}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kRSKanWa" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kRSKanWa' or matches($input-value, '[1-9][0-9]{0,2}\.[0-9]{1,2}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kRSKangXi" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kRSKangXi' or matches($input-value, '[1-9][0-9]{0,2}\.-?[0-9]{1,2}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kRSKorean" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kRSKorean' or matches($input-value, '[1-9][0-9]{0,2}\.[0-9]{1,2}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kRSUnicode" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kRSUnicode' or matches($input-value, '[1-9][0-9]{0,2}\W?\.-?[0-9]{1,2}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kSBGY" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kSBGY' or matches($input-value, '[0-9]{3}\.[0-7][0-9]')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kSemanticVariant" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kSemanticVariant' or matches($input-value, 'U\+2?[0-9A-F]{4}(&lt;k[A-Za-z0-9]+(:[TBZFJ]+)?(,k[A-Za-z0-9]+(:[TBZFJ]+)?)*)?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kSimplifiedVariant" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kSimplifiedVariant' or matches($input-value, 'U\+2?[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kSpecializedSemanticVariant" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kSpecializedSemanticVariant' or matches($input-value, 'U\+2?[0-9A-F]{4}(&lt;k[A-Za-z0-9]+(:[TBZFJ]+)?(,k[A-Za-z0-9]+(:[TBZFJ]+)?)*)?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kTGH" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kTGH' or matches($input-value, '20[0-9]{2}:[1-9][0-9]{0,3}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kTaiwanTelegraph" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kTaiwanTelegraph' or matches($input-value, '[0-9]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kTang" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kTang' or matches($input-value, '\*?[A-Za-z()æɑəɛ̀̌]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kTotalStrokes" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kTotalStrokes' or matches($input-value, '[1-9][0-9]{0,2}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kTraditionalVariant" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kTraditionalVariant' or matches($input-value, 'U\+2?[0-9A-F]{4}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kVietnamese" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kVietnamese' or matches($input-value, '[A-Za-zĐđ\p{M}*+]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kXHC1983" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kXHC1983' or matches($input-value, '[0-9]{4}\.[0-9]{3}\*?(,[0-9]{4}\.[0-9]{3}\*?)*:[\p{L}\p{M}*+]+')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kXerox" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kXerox' or matches($input-value, '[0-9]{3}:[0-9]{3}')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <constraintSpec ident="kZVariant" scheme="schematron">
        <constraint>
         <sch:rule context="tei:uniHan">
            <sch:let name="input-value" value="./following-sibling::tei:value"/>
            <sch:assert test=". != 'kZVariant' or matches($input-value, 'U\+2?[0-9A-F]{4}(&lt;k[A-Za-z0-9]+(:[TBZ]+)?(,k[A-Za-z0-9]+(:[TBZ]+)?)*)?')">
               <sch:value-of select="$input-value"/> does not match the expected value of the unihan property.</sch:assert>
            </sch:rule>
      </constraint>
    </constraintSpec>
    <attList>
        <attDef ident="version" usage="opt">
            <desc versionDate="2005-01-14" xml:lang="en">specifies the version number of the Unicode
                Standard in which this property name is defined.</desc>
            <desc versionDate="2018-08-23" xml:lang="de">gibt die Versionsnummer des Unicode
                Standards an, in dem dieser Eigenschaftsname definiert ist.</desc>
            <desc versionDate="2007-12-20" xml:lang="ko">특성명이 정의된 표준 유니코드의 버전 숫자를 명시한다.</desc>
            <desc versionDate="2007-05-02" xml:lang="zh-TW">說明該性質名稱是定義在哪一版本的統一碼標準 (Unicode Standard)
                中。</desc>
            <desc versionDate="2008-04-05" xml:lang="ja">当該素性名が定義されているユニコードの版番号を示す．</desc>
            <desc versionDate="2007-06-12" xml:lang="fr">spécifie le numéro de version de la norme
                Unicode où se trouve défini ce nom de propriété</desc>
            <desc versionDate="2007-05-04" xml:lang="es">especifica el número de versión del
                Estándar de Unicode en que este nombre de propiedad se ha definido.</desc>
            <desc versionDate="2007-01-21" xml:lang="it">specifica il numero della versione dello
                standard Unicode nel quale è definito il nome della proprietà.</desc>
            <datatype>
                <dataRef key="teidata.enumerated"/>
            </datatype>
            <valList type="closed">
                <valItem ident="1.1"/>
                <valItem ident="10.0"/>
                <valItem ident="11.0"/>
                <valItem ident="2.0"/>
                <valItem ident="2.1"/>
                <valItem ident="3.0"/>
                <valItem ident="3.1"/>
                <valItem ident="3.2"/>
                <valItem ident="4.0"/>
                <valItem ident="4.1"/>
                <valItem ident="5.0"/>
                <valItem ident="5.1"/>
                <valItem ident="5.2"/>
                <valItem ident="6.0"/>
                <valItem ident="6.1"/>
                <valItem ident="6.2"/>
                <valItem ident="6.3"/>
                <valItem ident="7.0"/>
                <valItem ident="8.0"/>
                <valItem ident="9.0"/>
                <valItem ident="unassigned"/>
            </valList>
        </attDef>
    </attList>
    <exemplum xml:lang="und">
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
         <charProp>
            <uniHan>kRSKangXi</uniHan>
            <value>120.5</value>
         </charProp>
      </egXML>
    </exemplum>
    <remarks versionDate="2018-08-22" xml:lang="en">
        <p>A definitive list of current Unihan tag names is provided in the <ref target="https://www.unicode.org/reports/tr38/">Unicode Han Database</ref>.</p>
    </remarks>
    <listRef>
        <ptr target="#ucsprops"/>
    </listRef>
</elementSpec>
